
import '../services/api_service.dart';
import 'package:docexaaesthetic/models/patientget.dart';
import 'package:docexaaesthetic/models/UploadImageResponse.dart';
import 'package:docexaaesthetic/models/GetUploadedImagesResponse.dart';
import 'dart:io';
import 'package:docexaaesthetic/models/Loginresponse.dart';
import 'package:docexaaesthetic/models/createaccountresponse.dart';





class PatientRepository {
  final ApiService _apiService;

  PatientRepository(this._apiService);

  Future<patientget> getPatients({
    required int userId,
    required int page,
    required perPage,
  }) async {
    try {
      return await _apiService.getPatients(
        userId: userId,
        page: page,
        perPage: perPage,
      );
    } catch (e) {
      print('Error in PatientRepository: $e');
      throw Exception('Failed to fetch patients: $e');
    }
  }



Future<GetUploadedImagesResponse> uploadPatientImages({
  required List<File> imageFiles,
  required String doctorId,
  required String patientId,
  required String patientNumber,
}) async {
  try {
    return await _apiService.uploadImagesWithParams(
      imageFiles: imageFiles,
      doctorId: doctorId,
      patientId: patientId,
      patientNumber: patientNumber,
    );
  } catch (e) {
    print('Error uploading patient images: $e');
    throw Exception('Failed to upload patient images: $e');
  }
}


Future<GetUploadedImagesResponse> uploadMarkedPatientImages({
  required List<File> imageFiles,
  required String doctorId,
  required String patientId,
  required String patientNumber,
  required String ismarked,
}) async {
  try {
    return await _apiService.uploadMarkedImagesWithParams(
      imageFiles: imageFiles,
      doctorId: doctorId,
      patientId: patientId,
      patientNumber: patientNumber,
      ismarked: ismarked,

    );
  } catch (e) {
    print('Error uploading patient images: $e');
    throw Exception('Failed to upload patient images: $e');
  }
}

Future<GetUploadedImagesResponse> getUploadedImages(String patientNumber, String doctorid) async {
    try {
      return await _apiService.getUploadedImages(patientNumber, doctorid);
    } catch (e) {
      print('Error getting uploaded images: $e');
      throw Exception('Failed to get uploaded images: $e');
    }
  }

Future<Loginresponse> login(String email, String password) async {
    return await _apiService.login(email, password);
  }

  /// Returns Loginresponse model after registration (adjust if your register model differs)
Future<Createaccountresponse> createAccount(Map<String, dynamic> data) async {
    return await _apiService.createAccount(data);
  }

Future<GetUploadedImagesResponse> deletePatientImage({
    required String doctorId,
    required String patientId,
    required String fileName,
    required String patientNumber,
  }) async {
    try {
      final response = await _apiService.deleteUploadedImage(
        doctorId: doctorId,
        patientId: patientId,
        fileName: fileName,
        patientNumber: patientNumber,
      );
      
      return response;
    } catch (e) {
      return GetUploadedImagesResponse(
        status: false,
        message: 'Error deleting image: $e',
      );
    }
  }
}



